# Generated from MiniC.g by ANTLR 4.7.2
from antlr4 import *
from io import StringIO
from typing.io import TextIO
import sys


def serializedATN():
    with StringIO() as buf:
        buf.write("\3\u608b\ua72a\u8133\ub9ed\u417c\u3be7\u7786\u5964\2$")
        buf.write("\u00b6\b\1\4\2\t\2\4\3\t\3\4\4\t\4\4\5\t\5\4\6\t\6\4\7")
        buf.write("\t\7\4\b\t\b\4\t\t\t\4\n\t\n\4\13\t\13\4\f\t\f\4\r\t\r")
        buf.write("\4\16\t\16\4\17\t\17\4\20\t\20\4\21\t\21\4\22\t\22\4\23")
        buf.write("\t\23\4\24\t\24\4\25\t\25\4\26\t\26\4\27\t\27\4\30\t\30")
        buf.write("\4\31\t\31\4\32\t\32\4\33\t\33\4\34\t\34\4\35\t\35\4\36")
        buf.write("\t\36\4\37\t\37\4 \t \4!\t!\4\"\t\"\4#\t#\3\2\3\2\3\2")
        buf.write("\3\2\3\3\3\3\3\3\3\3\3\3\3\4\3\4\3\5\3\5\3\6\3\6\3\7\3")
        buf.write("\7\3\b\3\b\3\t\3\t\3\n\3\n\3\n\3\13\3\13\3\13\3\13\3\13")
        buf.write("\3\f\3\f\3\f\3\f\3\f\3\f\3\r\3\r\3\16\3\16\3\16\3\17\3")
        buf.write("\17\3\17\3\20\3\20\3\20\3\21\3\21\3\21\3\22\3\22\3\22")
        buf.write("\3\23\3\23\3\23\3\24\3\24\3\24\3\25\3\25\3\26\3\26\3\26")
        buf.write("\3\27\3\27\3\30\3\30\3\30\3\31\3\31\3\32\3\32\3\33\3\33")
        buf.write("\3\34\3\34\3\35\3\35\3\36\3\36\3\36\3\37\3\37\3\37\3 ")
        buf.write("\3 \7 \u009e\n \f \16 \u00a1\13 \3!\6!\u00a4\n!\r!\16")
        buf.write("!\u00a5\3\"\3\"\6\"\u00aa\n\"\r\"\16\"\u00ab\3\"\3\"\3")
        buf.write("#\6#\u00b1\n#\r#\16#\u00b2\3#\3#\2\2$\3\3\5\4\7\5\t\6")
        buf.write("\13\7\r\b\17\t\21\n\23\13\25\f\27\r\31\16\33\17\35\20")
        buf.write("\37\21!\22#\23%\24\'\25)\26+\27-\30/\31\61\32\63\33\65")
        buf.write("\34\67\359\36;\37= ?!A\"C#E$\3\2\6\4\2C\\c|\6\2\62;C\\")
        buf.write("aac|\3\2\62;\5\2\13\f\17\17\"\"\2\u00b9\2\3\3\2\2\2\2")
        buf.write("\5\3\2\2\2\2\7\3\2\2\2\2\t\3\2\2\2\2\13\3\2\2\2\2\r\3")
        buf.write("\2\2\2\2\17\3\2\2\2\2\21\3\2\2\2\2\23\3\2\2\2\2\25\3\2")
        buf.write("\2\2\2\27\3\2\2\2\2\31\3\2\2\2\2\33\3\2\2\2\2\35\3\2\2")
        buf.write("\2\2\37\3\2\2\2\2!\3\2\2\2\2#\3\2\2\2\2%\3\2\2\2\2\'\3")
        buf.write("\2\2\2\2)\3\2\2\2\2+\3\2\2\2\2-\3\2\2\2\2/\3\2\2\2\2\61")
        buf.write("\3\2\2\2\2\63\3\2\2\2\2\65\3\2\2\2\2\67\3\2\2\2\29\3\2")
        buf.write("\2\2\2;\3\2\2\2\2=\3\2\2\2\2?\3\2\2\2\2A\3\2\2\2\2C\3")
        buf.write("\2\2\2\2E\3\2\2\2\3G\3\2\2\2\5K\3\2\2\2\7P\3\2\2\2\tR")
        buf.write("\3\2\2\2\13T\3\2\2\2\rV\3\2\2\2\17X\3\2\2\2\21Z\3\2\2")
        buf.write("\2\23\\\3\2\2\2\25_\3\2\2\2\27d\3\2\2\2\31j\3\2\2\2\33")
        buf.write("l\3\2\2\2\35o\3\2\2\2\37r\3\2\2\2!u\3\2\2\2#x\3\2\2\2")
        buf.write("%{\3\2\2\2\'~\3\2\2\2)\u0081\3\2\2\2+\u0083\3\2\2\2-\u0086")
        buf.write("\3\2\2\2/\u0088\3\2\2\2\61\u008b\3\2\2\2\63\u008d\3\2")
        buf.write("\2\2\65\u008f\3\2\2\2\67\u0091\3\2\2\29\u0093\3\2\2\2")
        buf.write(";\u0095\3\2\2\2=\u0098\3\2\2\2?\u009b\3\2\2\2A\u00a3\3")
        buf.write("\2\2\2C\u00a7\3\2\2\2E\u00b0\3\2\2\2GH\7k\2\2HI\7p\2\2")
        buf.write("IJ\7v\2\2J\4\3\2\2\2KL\7e\2\2LM\7j\2\2MN\7c\2\2NO\7t\2")
        buf.write("\2O\6\3\2\2\2PQ\7.\2\2Q\b\3\2\2\2RS\7=\2\2S\n\3\2\2\2")
        buf.write("TU\7*\2\2U\f\3\2\2\2VW\7+\2\2W\16\3\2\2\2XY\7}\2\2Y\20")
        buf.write("\3\2\2\2Z[\7\177\2\2[\22\3\2\2\2\\]\7k\2\2]^\7h\2\2^\24")
        buf.write("\3\2\2\2_`\7g\2\2`a\7n\2\2ab\7u\2\2bc\7g\2\2c\26\3\2\2")
        buf.write("\2de\7y\2\2ef\7j\2\2fg\7k\2\2gh\7n\2\2hi\7g\2\2i\30\3")
        buf.write("\2\2\2jk\7?\2\2k\32\3\2\2\2lm\7-\2\2mn\7?\2\2n\34\3\2")
        buf.write("\2\2op\7/\2\2pq\7?\2\2q\36\3\2\2\2rs\7,\2\2st\7?\2\2t")
        buf.write(" \3\2\2\2uv\7\61\2\2vw\7?\2\2w\"\3\2\2\2xy\7\'\2\2yz\7")
        buf.write("?\2\2z$\3\2\2\2{|\7?\2\2|}\7?\2\2}&\3\2\2\2~\177\7#\2")
        buf.write("\2\177\u0080\7?\2\2\u0080(\3\2\2\2\u0081\u0082\7>\2\2")
        buf.write("\u0082*\3\2\2\2\u0083\u0084\7>\2\2\u0084\u0085\7?\2\2")
        buf.write("\u0085,\3\2\2\2\u0086\u0087\7@\2\2\u0087.\3\2\2\2\u0088")
        buf.write("\u0089\7@\2\2\u0089\u008a\7?\2\2\u008a\60\3\2\2\2\u008b")
        buf.write("\u008c\7-\2\2\u008c\62\3\2\2\2\u008d\u008e\7/\2\2\u008e")
        buf.write("\64\3\2\2\2\u008f\u0090\7,\2\2\u0090\66\3\2\2\2\u0091")
        buf.write("\u0092\7\61\2\2\u00928\3\2\2\2\u0093\u0094\7\'\2\2\u0094")
        buf.write(":\3\2\2\2\u0095\u0096\7-\2\2\u0096\u0097\7-\2\2\u0097")
        buf.write("<\3\2\2\2\u0098\u0099\7/\2\2\u0099\u009a\7/\2\2\u009a")
        buf.write(">\3\2\2\2\u009b\u009f\t\2\2\2\u009c\u009e\t\3\2\2\u009d")
        buf.write("\u009c\3\2\2\2\u009e\u00a1\3\2\2\2\u009f\u009d\3\2\2\2")
        buf.write("\u009f\u00a0\3\2\2\2\u00a0@\3\2\2\2\u00a1\u009f\3\2\2")
        buf.write("\2\u00a2\u00a4\t\4\2\2\u00a3\u00a2\3\2\2\2\u00a4\u00a5")
        buf.write("\3\2\2\2\u00a5\u00a3\3\2\2\2\u00a5\u00a6\3\2\2\2\u00a6")
        buf.write("B\3\2\2\2\u00a7\u00a9\7)\2\2\u00a8\u00aa\t\2\2\2\u00a9")
        buf.write("\u00a8\3\2\2\2\u00aa\u00ab\3\2\2\2\u00ab\u00a9\3\2\2\2")
        buf.write("\u00ab\u00ac\3\2\2\2\u00ac\u00ad\3\2\2\2\u00ad\u00ae\7")
        buf.write(")\2\2\u00aeD\3\2\2\2\u00af\u00b1\t\5\2\2\u00b0\u00af\3")
        buf.write("\2\2\2\u00b1\u00b2\3\2\2\2\u00b2\u00b0\3\2\2\2\u00b2\u00b3")
        buf.write("\3\2\2\2\u00b3\u00b4\3\2\2\2\u00b4\u00b5\b#\2\2\u00b5")
        buf.write("F\3\2\2\2\7\2\u009f\u00a5\u00ab\u00b2\3\b\2\2")
        return buf.getvalue()


class MiniCLexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    T__0 = 1
    T__1 = 2
    T__2 = 3
    T__3 = 4
    T__4 = 5
    T__5 = 6
    T__6 = 7
    T__7 = 8
    T__8 = 9
    T__9 = 10
    T__10 = 11
    T__11 = 12
    T__12 = 13
    T__13 = 14
    T__14 = 15
    T__15 = 16
    T__16 = 17
    T__17 = 18
    T__18 = 19
    T__19 = 20
    T__20 = 21
    T__21 = 22
    T__22 = 23
    T__23 = 24
    T__24 = 25
    T__25 = 26
    T__26 = 27
    T__27 = 28
    T__28 = 29
    T__29 = 30
    IDENTIFIER = 31
    CONSTANT_INT = 32
    CONSTANT_CHAR = 33
    WS = 34

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "'int'", "'char'", "','", "';'", "'('", "')'", "'{'", "'}'", 
            "'if'", "'else'", "'while'", "'='", "'+='", "'-='", "'*='", 
            "'/='", "'%='", "'=='", "'!='", "'<'", "'<='", "'>'", "'>='", 
            "'+'", "'-'", "'*'", "'/'", "'%'", "'++'", "'--'" ]

    symbolicNames = [ "<INVALID>",
            "IDENTIFIER", "CONSTANT_INT", "CONSTANT_CHAR", "WS" ]

    ruleNames = [ "T__0", "T__1", "T__2", "T__3", "T__4", "T__5", "T__6", 
                  "T__7", "T__8", "T__9", "T__10", "T__11", "T__12", "T__13", 
                  "T__14", "T__15", "T__16", "T__17", "T__18", "T__19", 
                  "T__20", "T__21", "T__22", "T__23", "T__24", "T__25", 
                  "T__26", "T__27", "T__28", "T__29", "IDENTIFIER", "CONSTANT_INT", 
                  "CONSTANT_CHAR", "WS" ]

    grammarFileName = "MiniC.g"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.7.2")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


